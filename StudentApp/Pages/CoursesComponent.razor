@page "/my-courses"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Student.Shared.Models.CourseManagement
@using StudentApp.Services.CourseService
@using System.Security.Claims

<PageTitle>My Courses</PageTitle>

<RadzenText TextStyle="TextStyle.H3" TagName="TagName.H1" class="rz-pt-8">
    Enrolled Courses
</RadzenText>
<RadzenText TextStyle="TextStyle.Subtitle1" class="rz-pb-4">
    View and manage your current course enrollments
</RadzenText>

<RadzenCard Variant="Variant.Outlined" class="rz-my-4">
    <RadzenDataGrid Data="@enrolledCourses"
    TItem="EnrolledCourseModelDTO"
    AllowFiltering="true"
    AllowColumnResize="true"
    AllowAlternatingRows="false"
    FilterMode="FilterMode.Advanced"
    AllowSorting="true"
    PageSize="10"
    AllowPaging="true"
    PagerHorizontalAlign="HorizontalAlign.Left"
    ShowPagingSummary="true"
    ColumnWidth="300px"
    LogicalFilterOperator="LogicalFilterOperator.Or">

        <Columns>
            <RadzenDataGridColumn TItem="EnrolledCourseModelDTO" Property="CourseCode" Title="Course Code" Frozen="true" Width="120px" />
            <RadzenDataGridColumn TItem="EnrolledCourseModelDTO" Property="CourseName" Title="Course Name" Width="250px" />
            <RadzenDataGridColumn TItem="EnrolledCourseModelDTO" Property="Instructor" Title="Instructor" Width="180px" />
            <RadzenDataGridColumn TItem="EnrolledCourseModelDTO" Property="Credits" Title="Credits" Width="100px" />
            <RadzenDataGridColumn TItem="EnrolledCourseModelDTO" Property="Schedule" Title="Schedule" Width="150px" />
            <RadzenDataGridColumn TItem="EnrolledCourseModelDTO" Property="EnrollmentDate" Title="Enrolled On" FormatString="{0:d}" Width="120px" />

            <RadzenDataGridColumn TItem="EnrolledCourseModelDTO" Context="course" Filterable="false" Sortable="false"
            TextAlign="TextAlign.Center" Width="140px" Title="Actions">
                <Template Context="course">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger"
                    Icon="remove_circle"
                    Size="ButtonSize.Small"
                    Shade="Shade.Lighter"
                    Text="Deregister"
                    Click=@(() => DeregisterFromCourse(course)) />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenCard>

@if (enrolledCourses.Count == 0)
{
    <RadzenAlert AlertStyle="AlertStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter">
        You are not currently enrolled in any courses.
        <RadzenLink Path="/available-courses" Text="Browse available courses" /> to get started.
    </RadzenAlert>
}

@code {
    private List<EnrolledCourseModelDTO> enrolledCourses = new();
    [Inject] protected ICourseManagementService CourseManagementService { get; set; }
    [Inject] protected AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    bool isLoading = true; 
    private string? loggedInUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            loggedInUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
        await LoadEnrolledCourses();
        bool isLoading = false;
    }

    async Task LoadEnrolledCourses()
    {
        try
        {
            enrolledCourses = await CourseManagementService.GetCoursesLinkedToStudentAsync(loggedInUserId);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error Loading enrolled Courses",
                    Detail = "Failed to load available enrolled courses. Please try again later."
                });
        }
    }

    private async Task DeregisterFromCourse(EnrolledCourseModelDTO course)
    {
        var confirmed = await DialogService.Confirm(
            $"Are you sure you want to deregister from {course.CourseName}?",
            "Confirm Deregistration",
            new ConfirmOptions
                {
                    OkButtonText = "Yes",
                    CancelButtonText = "No"
                });

        if (confirmed == true)
        {
            var success = await CourseManagementService.DeleteLinkBetweenStudentAndCourseAsync(new LinkBetweenStudentAndCourse() { CourseId = course.CourseId, StudentId = loggedInUserId });

            if (success)
            {
                enrolledCourses.Remove(course);

                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Success",
                        Detail = $"Successfully deregistered from {course.CourseName}"
                    });

                StateHasChanged();
            }
            else{
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = $"Failed to deregister from {course.CourseName}. Please try again later."
                    });
            }
        }
    }

    [Inject] protected DialogService DialogService { get; set; } = default!;
    [Inject] protected NotificationService NotificationService { get; set; } = default!;
}
