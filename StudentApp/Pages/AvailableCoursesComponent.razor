@page "/available-courses"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Student.Shared.Models.CourseManagement
@using StudentApp.Services.CourseService
@using System.Security.Claims

<PageTitle>Available Courses</PageTitle>

<RadzenText TextStyle="TextStyle.H3" TagName="TagName.H1" class="rz-pt-8">
    Available Courses
</RadzenText>
<RadzenText TextStyle="TextStyle.Subtitle1" class="rz-pb-4">
    Browse and register for available courses
</RadzenText>

<RadzenCard Variant="Variant.Outlined" class="rz-my-4">
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
    Data="@availableCourses" TItem="CourseModelDTO" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="CourseModelDTO" Property="CourseCode" Title="Course Code" Frozen="true" Width="120px" />
            <RadzenDataGridColumn TItem="CourseModelDTO" Property="CourseName" Title="Course Name" Width="250px" />
            <RadzenDataGridColumn TItem="CourseModelDTO" Property="Instructor" Title="Instructor" Width="180px" />
            <RadzenDataGridColumn TItem="CourseModelDTO" Property="Credits" Title="Credits" Width="100px" />
            <RadzenDataGridColumn TItem="CourseModelDTO" Property="Schedule" Title="Schedule" Width="150px" />
            <RadzenDataGridColumn TItem="CourseModelDTO" Property="Department" Title="Department" Width="140px" />
            <RadzenDataGridColumn TItem="CourseModelDTO" Property="AvailableSeats" Title="Available Seats" Width="130px" />
            <RadzenDataGridColumn TItem="CourseModelDTO" Property="MaxSeats" Title="Max Seats" Width="110px" />
            <RadzenDataGridColumn TItem="CourseModelDTO" Context="course" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px" Title="Actions">
                <Template Context="course">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add_circle" Size="ButtonSize.Small"
                    Click=@(() => RegisterForCourse(course)) Text="Register"
                    Disabled="@(course.AvailableSeats == 0 || IsAlreadyEnrolled(course.CourseCode))" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenCard>

@code {
    [Inject] protected DialogService DialogService { get; set; } 
    [Inject] protected NotificationService NotificationService { get; set; }
    [Inject] protected ICourseManagementService CourseManagementService { get; set; }
    [Inject] protected AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    List<CourseModelDTO> availableCourses = new();
    List<EnrolledCourseModelDTO> enrolledCourses = new();
    bool isLoading = true;
    private string? loggedInUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            loggedInUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
        await LoadAvailableCourses();
        await LoadEnrolledCourseCodes();
        isLoading = false;
    }

    async Task LoadAvailableCourses()
    {
        try
        {
            availableCourses = await CourseManagementService.GetAllCoursesAsync();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error Loading Courses",
                    Detail = "Failed to load available courses. Please try again later."
                });
            availableCourses = new List<CourseModelDTO>();
        }
    }

    async Task LoadEnrolledCourseCodes()
    {
        try
        {
            enrolledCourses = await CourseManagementService.GetAllEnrolledCoursesAsync();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error Loading enrolled Courses",
                    Detail = "Failed to load available enrolled courses. Please try again later."
                });
            availableCourses = new List<CourseModelDTO>();
        }
    }

    bool IsAlreadyEnrolled(string courseCode)
    {
        return enrolledCourses.Any(x => x.CourseCode == courseCode);
    }

    async Task RegisterForCourse(CourseModelDTO course)
    {
        if (course.AvailableSeats == 0)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Registration Failed", Detail = "This course is full." });
            return;
        }

        if (IsAlreadyEnrolled(course.CourseCode))
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Already Enrolled", Detail = $"You are already enrolled in {course.CourseName}." });
            return;
        }

        var confirmed = await DialogService.Confirm($"Register for {course.CourseName} ({course.CourseCode})?", "Confirm Registration", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (confirmed == true)
        {
            var success = await CourseManagementService.RegisterForCourseAsync(new LinkBetweenStudentAndCourse() { CourseId = course.Id, StudentId = loggedInUserId });
            course.AvailableSeats--;
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Registration Successful", Detail = $"Successfully registered for {course.CourseName}" });
            StateHasChanged();
        }
    }

    async Task RefreshCourses()
    {
        isLoading = true;
        await LoadAvailableCourses();
        isLoading = false;
        StateHasChanged();
    }

}