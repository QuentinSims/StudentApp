@page "/register"
@layout AuthLayout
@using Microsoft.AspNetCore.Components.Forms
@using Student.Shared.Models.Authentication
@using StudentApp.Services.AccountManagementService

<PageTitle>Register - Student Portal</PageTitle>

<div class="rz-p-4" style="min-height: 100vh; display: flex; align-items: center; justify-content: center;">
    <RadzenCard class="rz-shadow-10" Style="width: 100%; max-width: 500px;">
        <RadzenStack Gap="2rem">
            <RadzenStack Gap="1rem" class="rz-text-align-center">
                <RadzenIcon Icon="person_add" Style="font-size: 4rem; color: var(--rz-primary);" />
                <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H1">Create Account</RadzenText>
                <RadzenText TextStyle="TextStyle.Subtitle1" class="rz-text-secondary-color">Join the Student Portal</RadzenText>
            </RadzenStack>

            <EditForm Model="@registerModel" OnValidSubmit="@HandleRegistration">
                <DataAnnotationsValidator />
                <RadzenStack Gap="1rem">
                    <RadzenRow Gap="1rem">
                        <RadzenColumn Size="6">
                            <RadzenFormField Text="First Name" Variant="Variant.Outlined">
                                <RadzenTextBox @bind-Value="@registerModel.FirstName" Placeholder="First name" Style="width: 100%" />
                                <ValidationMessage For="@(() => registerModel.FirstName)" />
                            </RadzenFormField>
                        </RadzenColumn>
                        <RadzenColumn Size="6">
                            <RadzenFormField Text="Last Name" Variant="Variant.Outlined">
                                <RadzenTextBox @bind-Value="@registerModel.LastName" Placeholder="Last name" Style="width: 100%" />
                                <ValidationMessage For="@(() => registerModel.LastName)" />
                            </RadzenFormField>
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenFormField Text="Email" Variant="Variant.Outlined">
                        <RadzenTextBox @bind-Value="@registerModel.Email" Placeholder="Enter your email address" Style="width: 100%" />
                        <ValidationMessage For="@(() => registerModel.Email)" />
                    </RadzenFormField>

                    <RadzenFormField Text="Username" Variant="Variant.Outlined">
                        <RadzenTextBox @bind-Value="@registerModel.UserName" Placeholder="Choose a username" Style="width: 100%" />
                        <ValidationMessage For="@(() => registerModel.UserName)" />
                    </RadzenFormField>

                    <RadzenFormField Text="Phone Number" Variant="Variant.Outlined">
                        <RadzenTextBox @bind-Value="@registerModel.PhoneNumber" Placeholder="Enter your phone number" Style="width: 100%" />
                        <ValidationMessage For="@(() => registerModel.PhoneNumber)" />
                    </RadzenFormField>

                    <RadzenFormField Text="Password" Variant="Variant.Outlined">
                        <RadzenPassword @bind-Value="@registerModel.Password" Placeholder="Create a password" Style="width: 100%" />
                        <ValidationMessage For="@(() => registerModel.Password)" />
                    </RadzenFormField>

                    <RadzenFormField Text="Confirm Password" Variant="Variant.Outlined">
                        <RadzenPassword @bind-Value="@registerModel.ConfirmPassword" Placeholder="Confirm your password" Style="width: 100%" />
                        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                    </RadzenFormField>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter">
                            @errorMessage
                        </RadzenAlert>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Success" Variant="Variant.Flat" Shade="Shade.Lighter">
                            @successMessage
                        </RadzenAlert>
                    }

                    <RadzenButton ButtonType="ButtonType.Submit" Text="Create Account" Icon="person_add"
                                  Style="width: 100%" Size="ButtonSize.Large" IsBusy="@isLoading" />
                </RadzenStack>
            </EditForm>

            <RadzenStack Gap="1rem" class="rz-text-align-center">
                <RadzenText TextStyle="TextStyle.Body2" class="rz-text-secondary-color">
                    Already have an account?
                </RadzenText>
                <RadzenButton Text="Sign In" Icon="login" ButtonStyle="ButtonStyle.Secondary"
                              Style="width: 100%" Click="@(() => NavigationManager.NavigateTo("/login"))" />
            </RadzenStack>

            <RadzenStack Gap="0.5rem" class="rz-text-align-center">
                <RadzenText TextStyle="TextStyle.Caption" class="rz-text-secondary-color">
                    Need help? Contact support@studentportal.com
                </RadzenText>
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>
</div>

@code {
    [Inject] protected NavigationManager NavigationManager { get; set; }
    [Inject] protected NotificationService NotificationService { get; set; } 
    [Inject] protected IAccountService AccountService { get; set; }

    private RegisterRequestDTO registerModel = new();
    private string errorMessage = "";
    private string successMessage = "";
    private bool isLoading = false;

    private async Task HandleRegistration()
    {
        isLoading = true;
        errorMessage = "";
        successMessage = "";
        StateHasChanged();

        try
        {
            var result = await AccountService.RegisterAsync(registerModel);

            if (result != null)
            {
                successMessage = "Registration successful! Please check your email to verify your account.";

                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Registration Successful",
                        Detail = $"Welcome {result.FullName}! Please verify your email."
                    });

                await Task.Delay(2000);
                NavigationManager.NavigateTo("/login");
            }
        }
        catch (HttpRequestException httpEx)
        {
            if (httpEx.Message.Contains("400"))
            {
                errorMessage = "Invalid registration data. Please check your information and try again.";
            }
            else if (httpEx.Message.Contains("409"))
            {
                errorMessage = "An account with this email or username already exists.";
            }
            else
            {
                errorMessage = "A network error occurred. Please check your connection and try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred during registration. Please try again.";
            Console.WriteLine($"Registration error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}