@page "/register"
@layout AuthLayout
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations

<PageTitle>Register - Student Portal</PageTitle>

<div class="rz-p-4" style="min-height: 100vh; display: flex; align-items: center; justify-content: center;">
    <RadzenCard class="rz-shadow-10" Style="width: 100%; max-width: 500px;">
        <RadzenStack Gap="2rem">
            <RadzenStack Gap="1rem" class="rz-text-align-center">
                <RadzenIcon Icon="person_add" Style="font-size: 4rem; color: var(--rz-primary);" />
                <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H1">Create Account</RadzenText>
                <RadzenText TextStyle="TextStyle.Subtitle1" class="rz-text-secondary-color">Join the Student Portal</RadzenText>
            </RadzenStack>

            <EditForm Model="@registerModel" OnValidSubmit="@HandleRegistration">
                <DataAnnotationsValidator />
                <RadzenStack Gap="1rem">
                    <RadzenRow Gap="1rem">
                        <RadzenColumn Size="6">
                            <RadzenFormField Text="First Name" Variant="Variant.Outlined">
                                <RadzenTextBox @bind-Value="@registerModel.FirstName" Placeholder="First name" Style="width: 100%" />
                                <ValidationMessage For="@(() => registerModel.FirstName)" />
                            </RadzenFormField>
                        </RadzenColumn>
                        <RadzenColumn Size="6">
                            <RadzenFormField Text="Last Name" Variant="Variant.Outlined">
                                <RadzenTextBox @bind-Value="@registerModel.LastName" Placeholder="Last name" Style="width: 100%" />
                                <ValidationMessage For="@(() => registerModel.LastName)" />
                            </RadzenFormField>
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenFormField Text="Email" Variant="Variant.Outlined">
                        <RadzenTextBox @bind-Value="@registerModel.Email" Placeholder="Enter your email address" Style="width: 100%" />
                        <ValidationMessage For="@(() => registerModel.Email)" />
                    </RadzenFormField>

                    <RadzenFormField Text="Student ID" Variant="Variant.Outlined">
                        <RadzenTextBox @bind-Value="@registerModel.StudentId" Placeholder="Enter your student ID" Style="width: 100%" />
                        <ValidationMessage For="@(() => registerModel.StudentId)" />
                    </RadzenFormField>

                    <RadzenFormField Text="Phone Number" Variant="Variant.Outlined">
                        <RadzenTextBox @bind-Value="@registerModel.PhoneNumber" Placeholder="Enter your phone number" Style="width: 100%" />
                        <ValidationMessage For="@(() => registerModel.PhoneNumber)" />
                    </RadzenFormField>

                    <RadzenFormField Text="Date of Birth" Variant="Variant.Outlined">
                        <RadzenDatePicker @bind-Value="@registerModel.DateOfBirth" Style="width: 100%" ShowTime="false" DateFormat="MM/dd/yyyy" />
                        <ValidationMessage For="@(() => registerModel.DateOfBirth)" />
                    </RadzenFormField>

                    <RadzenFormField Text="Password" Variant="Variant.Outlined">
                        <RadzenPassword @bind-Value="@registerModel.Password" Placeholder="Create a password" Style="width: 100%" />
                        <ValidationMessage For="@(() => registerModel.Password)" />
                    </RadzenFormField>

                    <RadzenFormField Text="Confirm Password" Variant="Variant.Outlined">
                        <RadzenPassword @bind-Value="@registerModel.ConfirmPassword" Placeholder="Confirm your password" Style="width: 100%" />
                        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                    </RadzenFormField>

                    <RadzenCheckBox @bind-Value="@registerModel.AgreeToTerms" Name="agreeToTerms" />
                    <RadzenLabel Text="I agree to the Terms of Service and Privacy Policy" Component="agreeToTerms" Style="margin-left: 8px;" />
                    <ValidationMessage For="@(() => registerModel.AgreeToTerms)" />

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter">
                            @errorMessage
                        </RadzenAlert>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Success" Variant="Variant.Flat" Shade="Shade.Lighter">
                            @successMessage
                        </RadzenAlert>
                    }

                    <RadzenButton ButtonType="ButtonType.Submit" Text="Create Account" Icon="person_add" 
                                  Style="width: 100%" Size="ButtonSize.Large" IsBusy="@isLoading" />
                </RadzenStack>
            </EditForm>

            <RadzenStack Gap="1rem" class="rz-text-align-center">
                <RadzenText TextStyle="TextStyle.Body2" class="rz-text-secondary-color">
                    Already have an account?
                </RadzenText>
                <RadzenButton Text="Sign In" Icon="login" ButtonStyle="ButtonStyle.Secondary" 
                              Style="width: 100%" Click="@(() => NavigationManager.NavigateTo("/login"))" />
            </RadzenStack>

            <RadzenStack Gap="0.5rem" class="rz-text-align-center">
                <RadzenText TextStyle="TextStyle.Caption" class="rz-text-secondary-color">
                    Need help? Contact support@studentportal.com
                </RadzenText>
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>
</div>

@code {
    private RegisterModel registerModel = new();
    private string errorMessage = "";
    private string successMessage = "";
    private bool isLoading = false;

    protected override void OnInitialized()
    {
        // Check if user is already logged in and redirect
        if (IsUserLoggedIn())
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task HandleRegistration()
    {
        isLoading = true;
        errorMessage = "";
        successMessage = "";
        StateHasChanged();

        try
        {
            // TODO: Replace with actual registration service
            await Task.Delay(1500); // Simulate API call

            // Simulate registration validation
            if (registerModel.Email == "existing@example.com")
            {
                errorMessage = "An account with this email address already exists.";
            }
            else if (registerModel.StudentId == "123456")
            {
                errorMessage = "This Student ID is already registered.";
            }
            else
            {
                // TODO: Call actual registration API
                successMessage = "Registration successful! Please check your email to verify your account.";
                
                NotificationService.Notify(new NotificationMessage 
                { 
                    Severity = NotificationSeverity.Success, 
                    Summary = "Registration Successful", 
                    Detail = "Welcome to Student Portal! Please verify your email." 
                });

                // Redirect to login after successful registration
                await Task.Delay(2000);
                NavigationManager.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during registration. Please try again.";
            // TODO: Log the exception
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private bool IsUserLoggedIn()
    {
        // TODO: Check actual authentication state
        return false;
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "First name is required")]
        [StringLength(50, ErrorMessage = "First name must be less than 50 characters")]
        public string FirstName { get; set; } = "";

        [Required(ErrorMessage = "Last name is required")]
        [StringLength(50, ErrorMessage = "Last name must be less than 50 characters")]
        public string LastName { get; set; } = "";

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Student ID is required")]
        [RegularExpression(@"^\d{6,10}$", ErrorMessage = "Student ID must be 6-10 digits")]
        public string StudentId { get; set; } = "";

        [Required(ErrorMessage = "Phone number is required")]
        [Phone(ErrorMessage = "Please enter a valid phone number")]
        public string PhoneNumber { get; set; } = "";

        [Required(ErrorMessage = "Date of birth is required")]
        public DateTime? DateOfBirth { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 8, ErrorMessage = "Password must be at least 8 characters long")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]", 
            ErrorMessage = "Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Please confirm your password")]
        [Compare("Password", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = "";

        [MustBeTrue(ErrorMessage = "You must agree to the Terms of Service and Privacy Policy")]
        public bool AgreeToTerms { get; set; } = false;
    }

    public class MustBeTrueAttribute : ValidationAttribute
    {
        public override bool IsValid(object? value)
        {
            return value is bool b && b;
        }
    }

    [Inject] protected NavigationManager NavigationManager { get; set; } = default!;
    [Inject] protected NotificationService NotificationService { get; set; } = default!;
}